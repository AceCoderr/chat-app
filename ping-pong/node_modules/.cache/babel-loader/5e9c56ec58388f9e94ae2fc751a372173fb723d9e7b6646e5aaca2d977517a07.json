{"ast":null,"code":"var _jsxFileName = \"A:\\\\Akka\\\\Ping-Pong-FE\\\\ping-pong\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useRef, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [guid, setGuid] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const socketRef = useRef(null);\n  const [messages, setMessages] = useState([]);\n  const handleCreateChatRoom = async () => {\n    setLoading(true);\n    const loginData = {\n      username,\n      password\n    };\n    setUsername('user');\n    setPassword('35511cdb-da9b-4564-9214-b076efe80288');\n    try {\n      const response = await axios.post('http://localhost:8080/create', loginData);\n      console.log(response);\n      setError(null);\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setGuid(data.guid);\n      return data.guid;\n    } catch (error) {\n      setError(`Failed to obtain connection ID: ${error.message}`);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to establish WebSocket connection\n  const connectWebSocket = connectionGuid => {\n    if (!connectionGuid) return;\n    try {\n      // Create WebSocket connection using the GUID\n      const wsUrl = `ws://${window.location.host}/ws/chat/${connectionGuid}`;\n      const socket = new WebSocket(wsUrl);\n      socketRef.current = socket;\n\n      // Set up WebSocket event handlers\n      socket.onopen = () => {\n        console.log('WebSocket connection established');\n        setConnected(true);\n        setMessages(prev => [...prev, {\n          text: 'Connected to chat server',\n          type: 'system'\n        }]);\n      };\n\n      // socket.onmessage = (event) => {\n      //   const message = JSON.parse(event.data);\n      //   setMessages(prev => [...prev, { text: message.text, type: 'received', sender: message.sender }]);\n      // };\n\n      // socket.onclose = () => {\n      //   console.log('WebSocket connection closed');\n      //   setConnected(false);\n      //   setMessages(prev => [...prev, { text: 'Disconnected from chat server', type: 'system' }]);\n      // };\n\n      socket.onerror = error => {\n        console.error('WebSocket error:', error);\n        setError('WebSocket connection error');\n        setConnected(false);\n      };\n    } catch (err) {\n      setError(`WebSocket connection error: ${err.message}`);\n    }\n  };\n\n  //Function to initialize the chat\n  const initializeChat = async () => {\n    const newGuid = await handleCreateChatRoom();\n    if (newGuid) {\n      connectWebSocket(newGuid);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WebSocket Chat App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"chat-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: initializeChat,\n          disabled: loading,\n          className: \"connect-button\",\n          children: loading ? 'Connecting...' : 'Connect to Chat'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wnfgrNmCFGKtlZJtXhANpocfxm8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","React","useRef","useState","jsxDEV","_jsxDEV","App","_s","username","setUsername","password","setPassword","guid","setGuid","loading","setLoading","error","setError","connected","setConnected","socketRef","messages","setMessages","handleCreateChatRoom","loginData","response","post","console","log","ok","Error","status","statusText","data","json","message","connectWebSocket","connectionGuid","wsUrl","window","location","host","socket","WebSocket","current","onopen","prev","text","type","onerror","err","initializeChat","newGuid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["A:/Akka/Ping-Pong-FE/ping-pong/src/App.js"],"sourcesContent":["\nimport axios from \"axios\";\nimport React, { useRef, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [guid, setGuid] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error,setError] = useState(null);\n  const [connected,setConnected] = useState(false);\n  const socketRef = useRef(null);\n  const [messages, setMessages] = useState([]);\n\n\n  const handleCreateChatRoom = async ()=>{\n    setLoading(true);\n    const loginData = {\n      username,\n      password\n  }\n  setUsername('user')\n  setPassword('35511cdb-da9b-4564-9214-b076efe80288')\n  try{\n    const response = await axios.post('http://localhost:8080/create',loginData);\n    console.log(response)\n    setError(null)\n    if (!response.ok) {\n      throw new Error(`Server returned ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    setGuid(data.guid)\n    return data.guid\n  }catch(error)\n  {\n    setError(`Failed to obtain connection ID: ${error.message}`);\n    return null\n  }\n  finally{\n    setLoading(false);\n  }\n}\n\n// Function to establish WebSocket connection\nconst connectWebSocket = (connectionGuid) => {\n  if (!connectionGuid) return;\n  \n  try {\n    // Create WebSocket connection using the GUID\n    const wsUrl = `ws://${window.location.host}/ws/chat/${connectionGuid}`;\n    const socket = new WebSocket(wsUrl);\n    socketRef.current = socket;\n\n    // Set up WebSocket event handlers\n    socket.onopen = () => {\n      console.log('WebSocket connection established');\n      setConnected(true);\n      setMessages(prev => [...prev, { text: 'Connected to chat server', type: 'system' }]);\n    };\n\n    // socket.onmessage = (event) => {\n    //   const message = JSON.parse(event.data);\n    //   setMessages(prev => [...prev, { text: message.text, type: 'received', sender: message.sender }]);\n    // };\n\n    // socket.onclose = () => {\n    //   console.log('WebSocket connection closed');\n    //   setConnected(false);\n    //   setMessages(prev => [...prev, { text: 'Disconnected from chat server', type: 'system' }]);\n    // };\n\n    socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setError('WebSocket connection error');\n      setConnected(false);\n    };\n  } catch (err) {\n    setError(`WebSocket connection error: ${err.message}`);\n  }\n};\n\n\n  //Function to initialize the chat\n  const initializeChat = async () => {\n    const newGuid = await handleCreateChatRoom();\n    if (newGuid) {\n      connectWebSocket(newGuid);\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>WebSocket Chat App</h1>\n      </header>\n      \n      <main className=\"chat-container\">\n          <div className=\"connection-section\">\n            <button \n              onClick={initializeChat} \n              disabled={loading}\n              className=\"connect-button\">\n              {loading ? 'Connecting...' : 'Connect to Chat'}\n            </button>\n            {error && <p className=\"error-message\">{error}</p>}\n          </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}